name: Publish Build
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - dev

jobs:
  master:
    if: "startsWith(github.event.head_commit.message, '[Build]') || github.event_name == 'pull_request'"
    runs-on: ubuntu-22.04
    name: Build and publish
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set input data
        id: input_data
        run: |
          echo "Json input data: ${{ toJson(github.event) }}"
          BRANCH=${{ github.head_ref || github.ref_name }}
          echo "Branch: $BRANCH"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          # Get PR number from event payload, default to 0 if not available
          PR_NUMBER=${{ github.event.number || 0 }}
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          # get current time in Asia/Ho_Chi_Minh timezone
          TIME_STRING=$(TZ="Asia/Ho_Chi_Minh" date +%Y%m%d-%H%M%S)
          echo "TIME_STRING=$TIME_STRING" >> $GITHUB_ENV
          MSG=$(git log --format=%B -n 1 ${{ github.event.after }} | grep -v '^#')
          # Check if the commit message contains "[Build]"
          if echo "$MSG" | grep -q "\[Build\]"; then
            echo "BUILD_CONDITION=true" >> $GITHUB_ENV
          else
            echo "BUILD_CONDITION=false" >> $GITHUB_ENV
          fi

      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Determine new version
        if: env.BUILD_CONDITION == 'true'
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          if [ -z "$CURRENT_VERSION" ] || [ "$CURRENT_VERSION" = "" ]; then
            CURRENT_VERSION="0.0.0"
          fi
          echo "Current version: $CURRENT_VERSION"

          # Format the current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "${CURRENT_VERSION%%-*}"

          # Create new version based on the current version
          NEW_MAJOR=$MAJOR
          NEW_MINOR=$MINOR
          NEW_PATCH=$PATCH
          NEW_VERSION="${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"

          # Change version based on branch or PR
          if [ "${{ env.BRANCH }}" = "main" ]; then
            # Branch main: add patch
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          elif [ "${{ env.PR_NUMBER }}" -gt 0 ]; then
            # Pull request: add -pr[pr_number].[time_string]
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-pr${{ env.PR_NUMBER }}.${{ env.TIME_STRING }}"
            echo "New version: $NEW_VERSION"
          else
            # Branch dev or other: add -branch.[time_string]
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-${{ env.BRANCH }}.${{ env.TIME_STRING }}"
            echo "New version: $NEW_VERSION"
          fi

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV

      - name: Install dependencies and build
        if: env.BUILD_CONDITION == 'true'
        id: install_and_build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          STRAPI_TOKEN: ${{ secrets.STRAPI_TOKEN }}
          STRAPI_URL: ${{ secrets.STRAPI_URL }}
        run: |
          yarn install
          yarn build
          cd packages/chain-list/build
          NEW_NAME="@anhtrieunhu/chain-list"
          NEW_VERSION="${{ env.NEW_VERSION }}"
          CURRENT_CONTENT=$(cat package.json)
          NEW_CONTENT=$(echo "$CURRENT_CONTENT" | jq --arg name "$NEW_NAME" --arg version "$NEW_VERSION" '.name = $name | .version = $version')
          echo "$NEW_CONTENT" > package.json
          if ! jq -e . >/dev/null 2>&1 < package.json; then
            echo "Error: Generated package.json is not valid JSON"
            exit 1
          fi
          npm publish --access public || echo "No changes to publish"

      - name: Update package.json and commit
        if: env.BRANCH == 'main' && env.BUILD_CONDITION == 'true'
        run: |
          # Cập nhật package.json
          echo "Updating package.json with new version: ${{ env.NEW_VERSION }}"
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ env.NEW_VERSION }}\"/" package.json
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add package.json
          git commit -m "Release: v${{ env.NEW_VERSION }}"
          git push origin ${{ env.BRANCH }} || echo "No changes to push"

#      - name: Deploy Assets to Cloudflare Pages
#        id: cloudflare_deployment
#        uses: cloudflare/pages-action@v1
#        with:
#          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
#          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
#          projectName: 'sw-chain-list-assets'
#          gitHubToken: ${{ secrets.GH_AUTOMATION_TOKEN }}
#          branch: ${{ github.ref_name }}
#          directory: './packages/chain-list-assets/public'
#          wranglerVersion: '3'

      - name: Create tag
        id: create_tag
        if: env.BUILD_CONDITION == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release stable version ${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"

      - name: Post comment on PR
        if: env.PR_NUMBER > 0 && steps.install_and_build.outcome == 'success' && env.BUILD_CONDITION == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # get the PR URL and commit message
          url="${{ github.event.pull_request._links.html.href}}/commits/${{github.event.after}}"
          MSG=$(git log --format=%B -n 1 ${{ github.event.after }} | grep -v '^#')
          COMMENT="Release for [$MSG]($url)\nNpm Version: [${{ env.NEW_VERSION }}](https://www.npmjs.com/package/${{env.PACKAGE_NAME}}/v/${{ env.NEW_VERSION }})"

          # Send a POST request to the GitHub API to create a comment on the PR
          curl -X POST \
               -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               -d "{\"body\": \"$COMMENT\"}" \
               "${{ github.event.pull_request._links.comments.href}}" || echo "Failed to post comment on PR"

      - name: Notify to Discord
        uses: sarisia/actions-status-discord@v1
        if: always() && env.BUILD_CONDITION == 'true'
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          username: Chain List Notifier
          title: ${{ github.workflow }}
          description: |
            The deployment has been completed.
            Commit message: ${{ github.event.head_commit.message }}
